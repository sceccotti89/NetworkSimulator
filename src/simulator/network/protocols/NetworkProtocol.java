/**
 * @author Stefano Ceccotti
*/

package simulator.network.protocols;

import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.TimeUnit;

import simulator.core.Agent;
import simulator.events.Event;
import simulator.events.Packet;
import simulator.events.impl.ProtocolEvent;
import simulator.network.NetworkLayer;
import simulator.topology.NetworkTopology;
import simulator.utils.Time;

public abstract class NetworkProtocol
{
    protected final NetworkTopology net;
    protected Agent source;
    protected Agent dest;
    protected Time time;
    protected int layer;
    protected int port;
    protected Map<NetworkLayer,NetworkProtocol> protocols;
    
    
    
    public NetworkProtocol( NetworkTopology net, Agent source )
    {
        time = new Time( 0, TimeUnit.MICROSECONDS );
        this.net = net;
        this.source = source;
        protocols = new HashMap<>( NetworkLayer.STACK_LENGTH );
    }
    
    public void setDestination( Agent dest ) {
        this.dest = dest;
    }
    
    protected void setLayer( int layer ) {
        this.layer = layer;
    }
    
    public int getLayer() {
        return layer;
    }
    
    protected void setPort( int port ) {
        this.port = port;
    }
    
    public int getPort() {
        return port;
    }
    
    /**
     * Returns the stack of protocols needed by the current one.
    */
    public Map<NetworkLayer,NetworkProtocol> getStack() {
        return protocols;
    }
    
    /**
     * Returns an object representing an event sent by this protocol,</br>
     * for instance a packet containing the distance to the own neighbours.</br>
     * NOTE: it can be {@code null}.
    */
    public abstract ProtocolEvent getEvent();
    
    /**
     * Returns the packet generated by this protocol.
    */
    public abstract Packet makePacket();
    
    /**
     * Process an incoming packet.
     * 
     * @param packet    the incoming packet.
     * 
     * @return The event generated by processing the incoming packet.
    */
    public abstract Event processPacket( Packet packet );
    
    /**
     * Returns the ID of this protocol.
    */
    public abstract String getID();
    
    
    
    
    // =========== ABSTRACT IMPLEMENTATION OF THE TCP/IP NETWORK PROTOCOLS =========== //
    
    
    public static abstract class ApplicationLayerProtocol extends NetworkProtocol
    {
        public ApplicationLayerProtocol( NetworkTopology net, Agent agent ) {
            super( net, agent );
        }
    }
    
    public static abstract class TransportLayerProtocol extends NetworkProtocol
    {
        public TransportLayerProtocol( NetworkTopology net, Agent agent ) {
            super( net, agent );
        }
        
        public TransportLayerProtocol( int sourcePort, int destPort ) {
            super( null, null );
            setPort( sourcePort );
        }
    }
    
    public static abstract class NetworkLayerProtocol extends NetworkProtocol
    {
        public NetworkLayerProtocol() {
            super( null, null );
        }
    }
    
    public static abstract class LinkLayerProtocol extends NetworkProtocol
    {
        public LinkLayerProtocol( NetworkTopology net, Agent agent ) {
            super( net, agent );
        }
    }
}
